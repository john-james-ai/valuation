# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "valuation"
version = "0.1.0"
description = "A Discounted Cash Flow Valuation of a Chicago-Based Grocer Chain."
readme = "README.md"
authors = ["john-james-ai <john.james.ai.studio@gmail.com>"]
license = "MIT"
repository = "https://github.com/john-james-ai/valuation"
homepage = "https://github.com/john-james-ai/valuation"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
]


[project]
name = "valuation"
version = "0.0.1"
description = "Valuation of Dominick's Finer Foods (1997-2003)"
authors = [
  { name = "John James" },
]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License"
]
requires-python = "~=3.12.0"

[tool.black]
# https://github.com/psf/black
target-version = ["py39"]
line-length = 100
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''
[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
addopts = """\
    --cov valuation \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""
filterwarnings = [
    "ignore::pytest.PytestUnknownMarkWarning",        
    ]

log_cli_level = "DEBUG"
testpaths = [
  "tests",
]

[tool.coverage.run]
source = ["tests"]
disable_warnings = [
    "no-ctracer",
]

[coverage.paths]
source = "valuation"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true


[tool.isort]
profile = "black"
known_first_party = ["valuation"]
force_sort_within_sections = true
line_length = 100
known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
multi_line_output = 3
indent = 4
color_output = true